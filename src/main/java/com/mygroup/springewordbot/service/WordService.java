package com.mygroup.springewordbot.service;


import com.mygroup.springewordbot.constant.ButtonId;
import com.mygroup.springewordbot.db.model.Word;
import com.mygroup.springewordbot.db.repo.UserRepository;
import com.mygroup.springewordbot.db.repo.WordRepository;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@Service
public class WordService {
    final WordRepository wordRepository;
    final UserRepository userRepository;


    public WordService(WordRepository wordRepository, UserRepository userRepository) {
        this.wordRepository = wordRepository;
        this.userRepository = userRepository;
    }

    public void init() {
        List<Word> words = new ArrayList<>();

        words.add(new Word(null, "Adventure", "…ôdÀàv…õn.t É…ôr", "–ü—Ä–∏–≥–æ–¥–∞",
                "Going on a solo hiking trip was a thrilling adventure for Sarah.",
                "–ü–æ–¥–æ—Ä–æ–∂ —É –≥–æ—Ä–∏ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤—ñ –±—É–ª–∞ –∑–∞—Ö–æ–ø–ª–∏–≤–æ—é –ø—Ä–∏–≥–æ–¥–æ—é –¥–ª—è –°–∞—Ä–∏.",null));
        words.add(new Word(null, "Efficient", "…™Ààf…™ É.…ônt", "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π",
                "Using a programmable thermostat is an efficient way to manage energy consumption at home.",
                "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞ - —Ü–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è–º –µ–Ω–µ—Ä–≥—ñ—ó –≤–¥–æ–º–∞.",null));
        words.add(new Word(null, "Illuminate", "…™ÀàluÀê.m…™.ne…™t", "–ü—ñ–¥—Å–≤—ñ—á—É–≤–∞—Ç–∏",
                "The streetlights helped illuminate the path during the dark night.",
                "–õ—ñ—Ö—Ç–∞—Ä—ñ –¥–æ–ø–æ–º–æ–≥–ª–∏ –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ —Å—Ç–µ–∂–∫—É –ø—ñ–¥ —á–∞—Å —Ç–µ–º–Ω–æ—ó –Ω–æ—á—ñ.",null));
        words.add(new Word(null, "Resilient", "r…™Ààz…™l.j…ônt", "–°—Ç—ñ–π–∫–∏–π, –≤–∏—Ç—Ä–∏–≤–∞–ª–∏–π",
                "Despite facing many challenges, the community showed a resilient spirit and quickly recovered.",
                "–ù–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –±–∞–≥–∞—Ç–æ —Ç—Ä—É–¥–Ω–æ—â—ñ–≤, —Å–ø—ñ–ª—å–Ω–æ—Ç–∞ –ø—Ä–æ—è–≤–∏–ª–∞ —Å—Ç—ñ–π–∫–∏–π –¥—É—Ö —ñ —à–≤–∏–¥–∫–æ –≤—ñ–¥–Ω–æ–≤–∏–ª–∞—Å—è.",null));
        words.add(new Word(null, "Versatile", "Ààv…úÀê.s…ô.ta…™l", "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π",
                "A Swiss Army knife is a versatile tool that can be used for various purposes, such as cutting and opening bottles.",
                "–®–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏–π –∞—Ä–º—ñ–π—Å—å–∫–∏–π –Ω—ñ–∂ - —Ü–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —è–∫–∏–π –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ü—ñ–ª–µ–π, —Ç–∞–∫–∏—Ö —è–∫ —Ä—ñ–∑–∞–Ω–Ω—è —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞–Ω–Ω—è –ø–ª—è—à–æ–∫.",null));
        wordRepository.saveAll(words);

    }

    public Word firstWord(){
        return wordRepository.findTopByOrderById();
    }

    public SendMessage showWord() {
        SendMessage message = new SendMessage();
        long count = wordRepository.count();

        Random rand = new Random();
        Word rWord = wordRepository.findById(rand.nextLong(count) + 1L).get();

        String messageText = "üá¨üáß " + rWord.getWord() + " - [" + rWord.getTranscription() + "] - " + rWord.getTranslation() + " üá∫üá¶\n\n" +
                "üó£ " + rWord.getExample() + "\n" +
                "‚Äçüßë‚Äçüè´  ||" + rWord.getExampleTranslation()+"||";

        message.setText(messageText);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        InlineKeyboardButton wordOk = new InlineKeyboardButton("‚úÖ " + "–í–∏–≤—á–∏–≤");
        wordOk.setCallbackData(ButtonId.WORD_OK.name());
        InlineKeyboardButton wordNext = new InlineKeyboardButton("‚û°Ô∏è " + "–ù–∞—Å—Ç—É–ø–Ω–µ");
        wordNext.setCallbackData(ButtonId.WORD_NEXT.name());

        List<List<InlineKeyboardButton>> rowsListButton = new ArrayList<>() {{
            add(new ArrayList<>() {{
                add(wordOk);
                add(wordNext);
            }});

        }};
        keyboardMarkup.setKeyboard(rowsListButton);
        message.setReplyMarkup(keyboardMarkup);
        return message;
    }

    public SendMessage showWord(Long userId, UserService userService) {

        LocalDate licenseEnd= userRepository.findById(userId).get().getLicenseEnd();


        LocalDate now=LocalDate.now();

        if (now.isAfter(licenseEnd)){
            return new SendMessage();
        }

        SendMessage message = new SendMessage();


        List<Word> wordList=wordRepository.top3WordsByUserId(userId);

        if (wordList.size()==0){
            wordRepository.reserById(userId);
            message.setText("–í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≤—á–∏–ª–∏ –≤—Å—ñ —Å–ª–æ–≤–∞!\n" +
                    "–ó–∞–∫—Ä—ñ–ø—ñ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–µ!–ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É /start");
            return message;
        }

        Random rand = new Random();
        Word rWord = wordList.get(rand.nextInt(wordList.size()));

        userService.setViewById(userId, rWord.getId());




        String messageText = "üá¨üáß " + rWord.getWord() + " - [" + rWord.getTranscription() + "] - " + rWord.getTranslation() + " üá∫üá¶\n\n" +
                "üó£ " + rWord.getExample() + "\n" +
                "‚Äçüßë‚Äçüè´ " + rWord.getExampleTranslation();

        message.setText(messageText);

        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        InlineKeyboardButton wordOk = new InlineKeyboardButton("‚úÖ " + "–í–∏–≤—á–∏–≤");
        wordOk.setCallbackData(ButtonId.WORD_OK.name());
        InlineKeyboardButton wordNext = new InlineKeyboardButton("‚û°Ô∏è " + "–ù–∞—Å—Ç—É–ø–Ω–µ");
        wordNext.setCallbackData(ButtonId.WORD_NEXT.name());

        List<List<InlineKeyboardButton>> rowsListButton = new ArrayList<>() {{
            add(new ArrayList<>() {{
                add(wordOk);
                add(wordNext);
            }});

        }};
        keyboardMarkup.setKeyboard(rowsListButton);
        message.setReplyMarkup(keyboardMarkup);
        return message;
    }


    public Word findById(Long viewWord) {
        return wordRepository.findById(viewWord).get();
    }
}
